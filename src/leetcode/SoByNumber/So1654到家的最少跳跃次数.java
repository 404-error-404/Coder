package leetcode.SoByNumber;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

/**
 * 有一只跳蚤的家在数轴上的位置 x 处。请你帮助它从位置 0 出发，到达它的家。
 * <p>
 * 跳蚤跳跃的规则如下：
 * <p>
 * 它可以 往前 跳恰好 a 个位置（即往右跳）。
 * 它可以 往后 跳恰好 b 个位置（即往左跳）。
 * 它不能 连续 往后跳 2 次。
 * 它不能跳到任何 forbidden 数组中的位置。
 * 跳蚤可以往前跳 超过 它的家的位置，但是它 不能跳到负整数 的位置。
 * <p>
 * 给你一个整数数组 forbidden ，其中 forbidden[i] 是跳蚤不能跳到的位置，同时给你整数 a， b 和 x ，请你返回跳蚤到家的最少跳跃次数。如果没有恰好到达 x 的可行方案，请你返回 -1 。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode.cn/problems/minimum-jumps-to-reach-home
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author 小乐乐
 * @date 2022/10/5 17:21
 */
public class So1654到家的最少跳跃次数 {
    /**
     * TODO 可以再做一做
     */
    public int minimumJumps(int[] forbidden, int a, int b, int x) {
        if (x == 0) {
            return 0;
        }
        int farthest = Math.max(Arrays.stream(forbidden).max().getAsInt() + a + b, x + b);

        Set<String> visited = new HashSet<>();
        visited.add("0-1");
        Set<Integer> forbiddenSet = new HashSet<>();
        for (int i : forbidden) {
            forbiddenSet.add(i);
        }

        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 1});
        int res = 0;
        while (!queue.isEmpty()) {
            for (int i = queue.size(); i > 0; i--) {
                int[] cur = queue.remove();
                if (cur[0] == x) {
                    return res;
                }
                int[] next = new int[]{cur[0] + a, 1};
                if (!visited.contains(next[0] + "-" + next[1]) && !forbiddenSet.contains(next[0]) && next[0] <= farthest) {
                    queue.add(next);
                    visited.add(next[0] + "-" + next[1]);
                }
                next = new int[]{cur[0] - b, -1};
                if (cur[1] != -1 && !visited.contains(next[0] + "-" + next[1]) && !forbiddenSet.contains(next[0]) && next[0] >= 0) {
                    queue.add(next);
                    visited.add(next[0] + "-" + next[1]);
                }
            }
            res++;
        }
        return -1;
    }

    @Test
    public void test() {
        int[] forbidden = new int[]{8, 3, 16, 6, 12, 20};
        int a = 15;
        int b = 13;
        int x = 11;
        forbidden = new int[]{128, 178, 147, 165, 63, 11, 150, 20, 158, 144, 136};
        a = 61;
        b = 170;
        x = 135;
        forbidden = new int[]{};
        a = 1;
        b = 14;
        x = 3;
        System.out.println(
            minimumJumps(forbidden, a, b, x)
        );
    }
}